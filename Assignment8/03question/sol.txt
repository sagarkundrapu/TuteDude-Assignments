PS D:\placement-notes\Tute Dude\Assignment8\03question> terraform init
Initializing the backend...
Initializing modules...
Downloading registry.terraform.io/terraform-aws-modules/vpc/aws 6.2.0 for vpc...
- vpc in .terraform\modules\vpc
Initializing provider plugins...
- Finding hashicorp/aws versions matching ">= 6.0.0"...
- Installing hashicorp/aws v6.14.1...
- Installed hashicorp/aws v6.14.1 (signed by HashiCorp)
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
================================================================================
PS D:\placement-notes\Tute Dude\Assignment8\03question> terraform apply 

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_ecs_cluster.main will be created
  + resource "aws_ecs_cluster" "main" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + name     = "app-cluster"
      + region   = "us-east-1"
      + tags_all = (known after apply)

      + setting (known after apply)
    }

  # aws_ecs_service.express_frontend will be created
  + resource "aws_ecs_service" "express_frontend" {
      + arn                                = (known after apply)
      + availability_zone_rebalancing      = (known after apply)
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 1
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "express-frontend-service"
      + platform_version                   = (known after apply)
      + region                             = "us-east-1"
      + scheduling_strategy                = "REPLICA"
      + tags_all                           = (known after apply)
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + deployment_configuration (known after apply)

      + load_balancer {
          + container_name   = "express_frontend"
          + container_port   = 3000
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = true
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # aws_ecs_service.flask_backend will be created
  + resource "aws_ecs_service" "flask_backend" {
      + arn                                = (known after apply)
      + availability_zone_rebalancing      = (known after apply)
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 1
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "flask-backend-service"
      + platform_version                   = (known after apply)
      + region                             = "us-east-1"
      + scheduling_strategy                = "REPLICA"
      + tags_all                           = (known after apply)
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + deployment_configuration (known after apply)

      + load_balancer {
          + container_name   = "flask_backend"
          + container_port   = 5000
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = true
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # aws_ecs_task_definition.express_frontend will be created
  + resource "aws_ecs_task_definition" "express_frontend" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = (known after apply)
      + cpu                      = "256"
      + enable_fault_injection   = (known after apply)
      + execution_role_arn       = (known after apply)
      + family                   = "express-frontend"
      + id                       = (known after apply)
      + memory                   = "512"
      + network_mode             = "awsvpc"
      + region                   = "us-east-1"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags_all                 = (known after apply)
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # aws_ecs_task_definition.flask_backend will be created
  + resource "aws_ecs_task_definition" "flask_backend" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = jsonencode(
            [
              + {
                  + essential    = true
                  + image        = "833779331449.dkr.ecr.us-east-1.amazonaws.com/flask-backend:latest"
                  + name         = "flask_backend"
                  + portMappings = [
                      + {
                          + containerPort = 5000
                        },
                    ]
                },
            ]
        )
      + cpu                      = "256"
      + enable_fault_injection   = (known after apply)
      + execution_role_arn       = (known after apply)
      + family                   = "flask-backend"
      + id                       = (known after apply)
      + memory                   = "512"
      + network_mode             = "awsvpc"
      + region                   = "us-east-1"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags_all                 = (known after apply)
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # aws_iam_policy.ssm_read will be created
  + resource "aws_iam_policy" "ssm_read" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "ssm-read-access"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # aws_iam_role.ecs_task_execution_role will be created
  + resource "aws_iam_role" "ecs_task_execution_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "ecsTaskExecutionRole"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role.ecs_task_role will be created
  + resource "aws_iam_role" "ecs_task_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "ecsTaskRole"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy_attachment.attach_ssm_read will be created
  + resource "aws_iam_role_policy_attachment" "attach_ssm_read" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "ecsTaskExecutionRole"
    }

  # aws_iam_role_policy_attachment.ecs_task_execution_policy will be created
  + resource "aws_iam_role_policy_attachment" "ecs_task_execution_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      + role       = "ecsTaskExecutionRole"
    }

  # aws_lb.app_alb will be created
  + resource "aws_lb" "app_alb" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enable_zonal_shift                                           = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = false
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "app-alb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + region                                                       = "us-east-1"
      + secondary_ips_auto_assigned_per_subnet                       = (known after apply)
      + security_groups                                              = (known after apply)
      + subnets                                                      = (known after apply)
      + tags_all                                                     = (known after apply)
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)

      + subnet_mapping (known after apply)
    }

  # aws_lb_listener.http will be created
  + resource "aws_lb_listener" "http" {
      + arn                                                                   = (known after apply)
      + id                                                                    = (known after apply)
      + load_balancer_arn                                                     = (known after apply)
      + port                                                                  = 80
      + protocol                                                              = "HTTP"
      + region                                                                = "us-east-1"
      + routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      + routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      + routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      + routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      + routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      + routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      + routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      + routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      + routing_http_response_access_control_max_age_header_value             = (known after apply)
      + routing_http_response_content_security_policy_header_value            = (known after apply)
      + routing_http_response_server_enabled                                  = (known after apply)
      + routing_http_response_strict_transport_security_header_value          = (known after apply)
      + routing_http_response_x_content_type_options_header_value             = (known after apply)
      + routing_http_response_x_frame_options_header_value                    = (known after apply)
      + ssl_policy                                                            = (known after apply)
      + tags_all                                                              = (known after apply)
      + tcp_idle_timeout_seconds                                              = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + mutual_authentication (known after apply)
    }

  # aws_lb_listener_rule.flask_api will be created
  + resource "aws_lb_listener_rule" "flask_api" {
      + arn          = (known after apply)
      + id           = (known after apply)
      + listener_arn = (known after apply)
      + priority     = 10
      + region       = "us-east-1"
      + tags_all     = (known after apply)

      + action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + condition {
          + path_pattern {
              + values = [
                  + "/api",
                  + "/api/*",
                ]
            }
        }
    }

  # aws_lb_target_group.express_tg will be created
  + resource "aws_lb_target_group" "express_tg" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "express-tg"
      + name_prefix                        = (known after apply)
      + port                               = 3000
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + region                             = "us-east-1"
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 2
          + interval            = 30
          + matcher             = "200"
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 2
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # aws_lb_target_group.flask_tg will be created
  + resource "aws_lb_target_group" "flask_tg" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "flask-tg"
      + name_prefix                        = (known after apply)
      + port                               = 5000
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + region                             = "us-east-1"
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 2
          + interval            = 30
          + matcher             = "200"
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 2
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # aws_security_group.ecs_sg will be created
  + resource "aws_security_group" "ecs_sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 3000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 3000
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 5000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 5000
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "ecs-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_ssm_parameter.backend_url will be created
  + resource "aws_ssm_parameter" "backend_url" {
      + arn            = (known after apply)
      + data_type      = (known after apply)
      + has_value_wo   = (known after apply)
      + id             = (known after apply)
      + insecure_value = (known after apply)
      + key_id         = (known after apply)
      + name           = "/app/backend_url"
      + region         = "us-east-1"
      + tags_all       = (known after apply)
      + tier           = (known after apply)
      + type           = "String"
      + value          = (sensitive value)
      + value_wo       = (write-only attribute)
      + version        = (known after apply)
    }

  # module.vpc.aws_default_network_acl.this[0] will be created
  + resource "aws_default_network_acl" "this" {
      + arn                    = (known after apply)
      + default_network_acl_id = (known after apply)
      + id                     = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + tags                   = {
          + "Name" = "app-vpc-default"
        }
      + tags_all               = {
          + "Name" = "app-vpc-default"
        }
      + vpc_id                 = (known after apply)

      + egress {
          + action          = "allow"
          + from_port       = 0
          + ipv6_cidr_block = "::/0"
          + protocol        = "-1"
          + rule_no         = 101
          + to_port         = 0
            # (1 unchanged attribute hidden)
        }
      + egress {
          + action          = "allow"
          + cidr_block      = "0.0.0.0/0"
          + from_port       = 0
          + protocol        = "-1"
          + rule_no         = 100
          + to_port         = 0
            # (1 unchanged attribute hidden)
        }

      + ingress {
          + action          = "allow"
          + from_port       = 0
          + ipv6_cidr_block = "::/0"
          + protocol        = "-1"
          + rule_no         = 101
          + to_port         = 0
            # (1 unchanged attribute hidden)
        }
      + ingress {
          + action          = "allow"
          + cidr_block      = "0.0.0.0/0"
          + from_port       = 0
          + protocol        = "-1"
          + rule_no         = 100
          + to_port         = 0
            # (1 unchanged attribute hidden)
        }
    }

  # module.vpc.aws_default_route_table.default[0] will be created
  + resource "aws_default_route_table" "default" {
      + arn                    = (known after apply)
      + default_route_table_id = (known after apply)
      + id                     = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + route                  = (known after apply)
      + tags                   = {
          + "Name" = "app-vpc-default"
        }
      + tags_all               = {
          + "Name" = "app-vpc-default"
        }
      + vpc_id                 = (known after apply)

      + timeouts {
          + create = "5m"
          + update = "5m"
        }
    }

  # module.vpc.aws_default_security_group.this[0] will be created
  + resource "aws_default_security_group" "this" {
      + arn                    = (known after apply)
      + description            = (known after apply)
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "app-vpc-default"
        }
      + tags_all               = {
          + "Name" = "app-vpc-default"
        }
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_internet_gateway.this[0] will be created
  + resource "aws_internet_gateway" "this" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + region   = "us-east-1"
      + tags     = {
          + "Name" = "app-vpc"
        }
      + tags_all = {
          + "Name" = "app-vpc"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_route.public_internet_gateway[0] will be created
  + resource "aws_route" "public_internet_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + gateway_id             = (known after apply)
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + region                 = "us-east-1"
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.vpc.aws_route_table.public[0] will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + region           = "us-east-1"
      + route            = (known after apply)
      + tags             = {
          + "Name" = "app-vpc-public"
        }
      + tags_all         = {
          + "Name" = "app-vpc-public"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + region         = "us-east-1"
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + region         = "us-east-1"
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + region                                         = "us-east-1"
      + tags                                           = {
          + "Name" = "app-vpc-public-us-east-1a"
        }
      + tags_all                                       = {
          + "Name" = "app-vpc-public-us-east-1a"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + region                                         = "us-east-1"
      + tags                                           = {
          + "Name" = "app-vpc-public-us-east-1b"
        }
      + tags_all                                       = {
          + "Name" = "app-vpc-public-us-east-1b"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.this[0] will be created
  + resource "aws_vpc" "this" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + region                               = "us-east-1"
      + tags                                 = {
          + "Name" = "app-vpc"
        }
      + tags_all                             = {
          + "Name" = "app-vpc"
        }
    }

Plan: 28 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + app_url      = (known after apply)
  + backend_url  = (known after apply)
  + frontend_url = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.vpc.aws_vpc.this[0]: Creating...
aws_iam_role.ecs_task_role: Creating...
aws_ecs_cluster.main: Creating...
aws_iam_role.ecs_task_execution_role: Creating...
aws_iam_role.ecs_task_role: Creation complete after 2s [id=ecsTaskRole]
aws_iam_role.ecs_task_execution_role: Creation complete after 2s [id=ecsTaskExecutionRole]
aws_iam_role_policy_attachment.ecs_task_execution_policy: Creating...
aws_ecs_task_definition.flask_backend: Creating...
aws_ecs_task_definition.flask_backend: Creation complete after 1s [id=flask-backend]
aws_iam_role_policy_attachment.ecs_task_execution_policy: Creation complete after 1s [id=ecsTaskExecutionRole/arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy]
module.vpc.aws_vpc.this[0]: Still creating... [00m10s elapsed]
aws_ecs_cluster.main: Still creating... [00m10s elapsed]
aws_ecs_cluster.main: Creation complete after 13s [id=arn:aws:ecs:us-east-1:833779331449:cluster/app-cluster]
module.vpc.aws_vpc.this[0]: Creation complete after 15s [id=vpc-06c63ba25d519ce9a]
module.vpc.aws_route_table.public[0]: Creating...
module.vpc.aws_default_route_table.default[0]: Creating...
module.vpc.aws_internet_gateway.this[0]: Creating...
module.vpc.aws_default_security_group.this[0]: Creating...
module.vpc.aws_subnet.public[0]: Creating...
module.vpc.aws_subnet.public[1]: Creating...
aws_security_group.ecs_sg: Creating...
aws_lb_target_group.express_tg: Creating...
module.vpc.aws_default_network_acl.this[0]: Creating...
aws_lb_target_group.flask_tg: Creating...
module.vpc.aws_default_route_table.default[0]: Creation complete after 2s [id=rtb-0d1b2119d1871a9bb]
module.vpc.aws_subnet.public[1]: Creation complete after 2s [id=subnet-0a795be910af1d4af]
module.vpc.aws_internet_gateway.this[0]: Creation complete after 2s [id=igw-0f5d2135ddd200bd9]
module.vpc.aws_route_table.public[0]: Creation complete after 2s [id=rtb-0b19306fb6a58bc37]
module.vpc.aws_route.public_internet_gateway[0]: Creating...
module.vpc.aws_subnet.public[0]: Creation complete after 2s [id=subnet-0ce0b249c86dd5730]
module.vpc.aws_route_table_association.public[0]: Creating...
module.vpc.aws_route_table_association.public[1]: Creating...
module.vpc.aws_route_table_association.public[0]: Creation complete after 1s [id=rtbassoc-018fecc51e5651856]
module.vpc.aws_route_table_association.public[1]: Creation complete after 1s [id=rtbassoc-09118213095c66df0]
aws_lb_target_group.flask_tg: Creation complete after 4s [id=arn:aws:elasticloadbalancing:us-east-1:833779331449:targetgroup/flask-tg/35c09478b0fde02c]
aws_lb_target_group.express_tg: Creation complete after 4s [id=arn:aws:elasticloadbalancing:us-east-1:833779331449:targetgroup/express-tg/ecca7e3eb09d44f7]
module.vpc.aws_route.public_internet_gateway[0]: Creation complete after 2s [id=r-rtb-0b19306fb6a58bc371080289494]
module.vpc.aws_default_network_acl.this[0]: Creation complete after 4s [id=acl-04bcc46ca5e1de6d2]
module.vpc.aws_default_security_group.this[0]: Creation complete after 4s [id=sg-0a1d4e2a9f3d4b0b1]
aws_security_group.ecs_sg: Creation complete after 6s [id=sg-02ff863a460364f79]
aws_lb.app_alb: Creating...
aws_ecs_service.flask_backend: Creating...
aws_lb.app_alb: Still creating... [00m10s elapsed]
aws_ecs_service.flask_backend: Still creating... [00m10s elapsed]
aws_lb.app_alb: Still creating... [00m20s elapsed]
aws_ecs_service.flask_backend: Still creating... [00m20s elapsed]
aws_lb.app_alb: Still creating... [00m30s elapsed]
aws_ecs_service.flask_backend: Still creating... [00m30s elapsed]
aws_lb.app_alb: Still creating... [00m40s elapsed]
aws_ecs_service.flask_backend: Still creating... [00m40s elapsed]
aws_lb.app_alb: Still creating... [00m50s elapsed]
aws_ecs_service.flask_backend: Still creating... [00m50s elapsed]
aws_lb.app_alb: Still creating... [01m00s elapsed]
aws_ecs_service.flask_backend: Still creating... [01m00s elapsed]
aws_lb.app_alb: Still creating... [01m10s elapsed]
aws_ecs_service.flask_backend: Still creating... [01m10s elapsed]
aws_lb.app_alb: Still creating... [01m20s elapsed]
aws_ecs_service.flask_backend: Still creating... [01m20s elapsed]
aws_lb.app_alb: Still creating... [01m30s elapsed]
aws_ecs_service.flask_backend: Still creating... [01m30s elapsed]
aws_lb.app_alb: Still creating... [01m40s elapsed]
aws_ecs_service.flask_backend: Still creating... [01m40s elapsed]
aws_lb.app_alb: Still creating... [01m50s elapsed]
aws_ecs_service.flask_backend: Still creating... [01m50s elapsed]
aws_lb.app_alb: Still creating... [02m00s elapsed]
aws_ecs_service.flask_backend: Still creating... [02m00s elapsed]
aws_lb.app_alb: Still creating... [02m10s elapsed]
aws_ecs_service.flask_backend: Still creating... [02m10s elapsed]
aws_lb.app_alb: Still creating... [02m20s elapsed]
aws_ecs_service.flask_backend: Still creating... [02m20s elapsed]
aws_lb.app_alb: Still creating... [02m30s elapsed]
aws_ecs_service.flask_backend: Still creating... [02m30s elapsed]
aws_lb.app_alb: Still creating... [02m40s elapsed]
aws_ecs_service.flask_backend: Still creating... [02m40s elapsed]
aws_lb.app_alb: Still creating... [02m50s elapsed]
aws_ecs_service.flask_backend: Still creating... [02m50s elapsed]
aws_lb.app_alb: Still creating... [03m00s elapsed]
aws_ecs_service.flask_backend: Still creating... [03m00s elapsed]
aws_lb.app_alb: Still creating... [03m10s elapsed]
aws_ecs_service.flask_backend: Still creating... [03m10s elapsed]
aws_lb.app_alb: Creation complete after 3m17s [id=arn:aws:elasticloadbalancing:us-east-1:833779331449:loadbalancer/app/app-alb/4ef46f2fce02c915]
aws_ssm_parameter.backend_url: Creating...
aws_ecs_task_definition.express_frontend: Creating...
aws_lb_listener.http: Creating...
aws_ecs_task_definition.express_frontend: Creation complete after 1s [id=express-frontend]
aws_ecs_service.express_frontend: Creating...
aws_lb_listener.http: Creation complete after 1s [id=arn:aws:elasticloadbalancing:us-east-1:833779331449:listener/app/app-alb/4ef46f2fce02c915/f108070b0942204b]
aws_lb_listener_rule.flask_api: Creating...
aws_ssm_parameter.backend_url: Creation complete after 1s [id=/app/backend_url]
aws_iam_policy.ssm_read: Creating...
aws_lb_listener_rule.flask_api: Creation complete after 1s [id=arn:aws:elasticloadbalancing:us-east-1:833779331449:listener-rule/app/app-alb/4ef46f2fce02c915/f108070b0942204b/bbddae033f7a46d9]
aws_ecs_service.express_frontend: Creation complete after 1s [id=arn:aws:ecs:us-east-1:833779331449:service/app-cluster/express-frontend-service]
aws_ecs_service.flask_backend: Still creating... [03m20s elapsed]
aws_iam_policy.ssm_read: Creation complete after 2s [id=arn:aws:iam::833779331449:policy/ssm-read-access]
aws_iam_role_policy_attachment.attach_ssm_read: Creating...
aws_iam_role_policy_attachment.attach_ssm_read: Creation complete after 1s [id=ecsTaskExecutionRole/arn:aws:iam::833779331449:policy/ssm-read-access]
aws_ecs_service.flask_backend: Creation complete after 3m30s [id=arn:aws:ecs:us-east-1:833779331449:service/app-cluster/flask-backend-service]

Apply complete! Resources: 28 added, 0 changed, 0 destroyed.

Outputs:

app_url = "http://app-alb-1427483322.us-east-1.elb.amazonaws.com"
backend_url = "http://app-alb-1427483322.us-east-1.elb.amazonaws.com/api"
frontend_url = "http://app-alb-1427483322.us-east-1.elb.amazonaws.com/"
PS D:\placement-notes\Tute Dude\Assignment8\03question> 